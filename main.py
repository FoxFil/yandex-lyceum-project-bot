import telebot
import sqlite3 as sql
from datetime import datetime, timedelta
import random
import requests
import os
from dotenv import load_dotenv
import pandas as pd

load_dotenv()


BOT_TOKEN = os.getenv("BOT_TOKEN")
NUTRITIONIX_APP_ID = os.getenv("NUTRITIONIX_APP_ID")
NUTRITIONIX_APP_KEY = os.getenv("NUTRITIONIX_APP_KEY")
FOOD_EMOJIS = list(
    "üçáüçàüçâüçäüçãüçã‚Äçüü©üçåüççü•≠üçéüçèüçêüçëüçíüçìü´êü•ùüçÖü´íü••ü•ëüçÜü•îü•ïüåΩüå∂Ô∏èü´ëü•íü•¨ü•¶üßÑüßÖü•úü´òüå∞ü´öü´õüçÑ‚Äçüü´üçûü•êü•ñü´ìü•®ü•Øü•ûüßáüßÄüçñüçóü•©ü•ìüçîüçüüçïüå≠ü•™üåÆüåØü´îü•ôüßÜü•öüç≥ü•òüç≤ü´ïü•£ü•óüçøüßàüßÇü•´üçùüç±üçòüçôüçöüçõüçúüç†üç¢üç£üç§üç•ü•Æüç°ü•üü•†ü•°üç¶üçßüç®üç©üç™üéÇüç∞üßÅü•ßüç´üç¨üç≠üçÆüçØüçºü•õ‚òïü´ñüçµüç∂üçæüç∑üç∏üçπüç∫üçªü•Çü•Éü´óü•§üßãüßÉüßâü•¢üçΩÔ∏èüç¥ü•Ñüî™ü´ôüè∫"
)

bot = telebot.TeleBot(BOT_TOKEN)

con = sql.connect("meals.db")
c = con.cursor()
c.execute("""CREATE TABLE IF NOT EXISTS meals
             (time text, meal text, amount integer, calories integer)""")
con.commit()
con.close()

print("bot started")


def get_nutrition_info(query):
    headers = {
        "x-app-id": NUTRITIONIX_APP_ID,
        "x-app-key": NUTRITIONIX_APP_KEY,
    }
    payload = {"query": query}
    response = requests.post(
        "https://trackapi.nutritionix.com/v2/natural/nutrients",
        headers=headers,
        json=payload,
    )
    response.raise_for_status()
    return response.json()


@bot.message_handler(commands=["add_meal"])
def add_meal(message: telebot.types.Message):
    try:
        _, meal_info = message.text.split(maxsplit=1)
        meal, amount = meal_info.rsplit(maxsplit=1)
        amount = int(amount)

        data = get_nutrition_info(meal)
        food_info = data["foods"][0]
        calories_per_100g = (
            int(food_info["nf_calories"])
            / int(food_info.get("serving_weight_grams", 100))
            * 100
        )
        total_calories = calories_per_100g * amount / 100

        current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        con = sql.connect("meals.db")
        c = con.cursor()
        c.execute(
            "INSERT INTO meals VALUES (?, ?, ?, ?)",
            (current_time, meal, amount, total_calories),
        )

        bot.send_message(
            message.chat.id, f"{random.choice(FOOD_EMOJIS)} –ë–ª—é–¥–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!"
        )

        con.commit()
        con.close()
    except ValueError:
        bot.send_message(
            message.chat.id,
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π: /add_meal {–±–ª—é–¥–æ} {–≥—Ä–∞–º–º—ã}.",
        )
    except requests.exceptions.RequestException:
        bot.send_message(
            message.chat.id,
            "‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –≤–≤–µ–ª–∏ –µ–¥—É –Ω–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º, –ª–∏–±–æ —Ç–∞–∫–æ–π –µ–¥—ã –Ω–µ—Ç.",
            parse_mode="Markdown",
        )
    except (KeyError, IndexError):
        bot.send_message(message.chat.id, "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Ç–∞–∫–æ–π –µ–¥—ã –Ω–µ—Ç —É –Ω–∞—Å –≤ –±–∞–∑–µ!")


@bot.message_handler(commands=["view_meals"])
def view_meals(message: telebot.types.Message):
    if len(message.text.split()) == 1:
        period = "day"
    else:
        _, period = message.text.split(maxsplit=1)
    if period == "day":
        today = datetime.now().strftime("%Y-%m-%d")

        con = sql.connect("meals.db")
        c = con.cursor()
        c.execute(
            "SELECT meal, amount, calories FROM meals WHERE time LIKE ?", (f"{today}%",)
        )
        meals = c.fetchall()
        con.commit()
        con.close()

        if meals:
            calories_total = [cal for _, _, cal in meals]
            meal_list = "\n".join(
                [
                    f"- {meal} ({amount}g): *{calories:.2f} kcal*"
                    for meal, amount, calories in meals
                ]
            )
            bot.send_message(
                message.chat.id,
                f"{random.choice(FOOD_EMOJIS)} *–í–æ—Ç –≤–∞—à–∏ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –±–ª—é–¥–∞*:\n\n{meal_list}\n\nüìù –í —Å—É–º–º–µ: *{sum(calories_total):.2f} kcal* –∑–∞ –¥–µ–Ω—å",
                parse_mode="Markdown",
            )
        else:
            bot.send_message(
                message.chat.id, "‚ùå –í—ã –ø–æ–∫–∞ —á—Ç–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–ª–∏ –Ω–∏–∫–∞–∫–æ–π –µ–¥—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è!"
            )
    elif period in ("week", "month", "year"):
        try:
            if period == "week":
                start_date = (datetime.now() - timedelta(days=7)).strftime("%Y-%m-%d")
            elif period == "month":
                start_date = (datetime.now() - timedelta(days=30)).strftime("%Y-%m-%d")
            elif period == "year":
                start_date = (datetime.now() - timedelta(days=365)).strftime("%Y-%m-%d")

            con = sql.connect("meals.db")
            c = con.cursor()
            data = c.execute(
                "SELECT calories, strftime('%Y-%m-%d', time) as date FROM meals WHERE time >= ?",
                (start_date,),
            )
            calories_by_date = {}
            for calories, date in data.fetchall():
                calories_by_date.setdefault(date, []).append(calories)
            con.commit()
            con.close()

            total_days = len(calories_by_date)
            avg_calories = (
                sum(sum(daily_calories) for daily_calories in calories_by_date.values())
                / total_days
            )

            bot.send_message(
                message.chat.id,
                f"""{random.choice(FOOD_EMOJIS)} –°—Ä–µ–¥–∏–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –∫–∏–ª–æ–∫–∞–ª–æ—Ä–∏–π –∑–∞ {f'''–ø–æ—Å–ª–µ–¥–Ω–∏–π {"–º–µ—Å—è—Ü" if period == "month" else "–≥–æ–¥"}''' if period != "week" else "–ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é"}:\n\n*{avg_calories:.2f} kcal* –≤ –¥–µ–Ω—å.""",
                parse_mode="Markdown",
            )

        except ZeroDivisionError:
            bot.send_message(message.chat.id, "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –±–ª—é–¥ –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥.")
    elif period == "all":
        con = sql.connect("meals.db")
        c = con.cursor()
        c.execute("SELECT * FROM meals")
        meals = c.fetchall()
        con.commit()
        con.close()

        if meals:
            df = pd.DataFrame(meals, columns=["Time", "Meal", "Grams", "Kcalories"])
            file_path = "meals_data.csv"
            df.to_csv(file_path, index=False)
            with open(file_path, "rb") as f:
                bot.send_document(message.chat.id, f)
            os.remove(file_path)
        else:
            bot.send_message(message.chat.id, "‚ùå –ù–∏–∫–∞–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ –µ–¥–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    else:
        bot.send_message(
            message.chat.id,
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–µ—Ä–∏–æ–¥. –ò—Å–ø–æ–ª—å–∑—É–π: day, week, month, year, –∏–ª–∏ all",
        )


bot.infinity_polling()

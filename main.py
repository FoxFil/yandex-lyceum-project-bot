import telebot
import sqlite3 as sql
from datetime import datetime, timedelta
import random
import requests
import os
from dotenv import load_dotenv
import pandas as pd
import matplotlib

matplotlib.use('Agg')  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å backend_agg
import matplotlib.pyplot as plt
import matplotlib.dates as mdates

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
NUTRITIONIX_APP_ID = os.getenv("NUTRITIONIX_APP_ID")
NUTRITIONIX_APP_KEY = os.getenv("NUTRITIONIX_APP_KEY")
FOOD_EMOJIS = list(
    "üçáüçàüçâüçäüçãüçã‚Äçüü©üçåüççü•≠üçéüçèüçêüçëüçíüçìü´êü•ùüçÖü´íü••ü•ëüçÜü•îü•ïüåΩüå∂ü´ëü•íü•¨ü•¶üßÑüßÖü•úü´òüå∞ü´öü´õüçÑ‚Äçüü´üçûü•êü•ñü´ìü•®ü•Øü•ûüßáüßÄüçñüçóü•©ü•ìüçîüçüüçïüå≠ü•™üåÆüåØü´îü•ôüßÜü•öüç≥ü•òüç≤ü´ïü•£ü•óüçøüßàüßÇü•´üçùüç±üçòüçôüçöüçõüçúüç†üç¢üç£üç§üç•ü•Æüç°ü•üü•†ü•°üç¶üçßüç®üç©üç™üéÇüç∞üßÅü•ßüç´üç¨üç≠üçÆüçØüçºü•õ‚òïÔ∏èü´ñüçµüç∂üçæüç∑üç∏üçπüç∫üçªü•Çü•Éü´óü•§üßãüßÉüßâü•¢üçΩüç¥ü•Ñüî™ü´ôüè∫"
)

bot = telebot.TeleBot(BOT_TOKEN)

# –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
con = sql.connect("meals.db")
c = con.cursor()
c.execute("""CREATE TABLE IF NOT EXISTS meals
             (id integer, time text, meal text, amount integer, 
              calories integer, protein, fat, carbs)""")
con.commit()
con.close()

print("bot started")


@bot.message_handler(commands=["start"])
def start(message: telebot.types.Message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –ø–∏—Ç–∞–Ω–∏–µ–º.\n"
                                      "–í–≤–µ–¥–∏ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")


@bot.message_handler(commands=["help"])
def help(message: telebot.types.Message):
    bot.send_message(message.chat.id, """–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:
/add_meal {–±–ª—é–¥–æ} {–≥—Ä–∞–º–º—ã} - –¥–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–æ
/view_meals [day, week, month, year, all] - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –±–ª—é–¥ –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ 
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥""")


def get_nutrition_info(query, api_id=NUTRITIONIX_APP_ID, api_key=NUTRITIONIX_APP_KEY):
    url = "https://trackapi.nutritionix.com/v2/natural/nutrients"
    headers = {
        "x-app-id": api_id,
        "x-app-key": api_key,
        "Content-Type": "application/json",
    }
    data = {"query": query}
    response = requests.post(url, headers=headers, json=data)

    if response.status_code == 200:
        data = response.json()
        foods = data["foods"]
        if foods:
            food = foods[0]
            return {
                "calories": food["nf_calories"],
                "protein": food["nf_protein"],
                "fat": food["nf_total_fat"],
                "carbs": food["nf_total_carbohydrate"],
            }
    else:
        print(f"Error: {response.status_code} - {response.text}")
        return None


@bot.message_handler(commands=["add_meal"])
def add_meal(message: telebot.types.Message):
    try:
        _, meal_info = message.text.split(maxsplit=1)
        meal, amount = meal_info.rsplit(maxsplit=1)
        amount = int(amount)

        nutrition_info = get_nutrition_info(meal)

        if nutrition_info:
            calories = nutrition_info["calories"]
            protein = nutrition_info["protein"]
            fat = nutrition_info["fat"]
            carbs = nutrition_info["carbs"]

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ö–ë–ñ–£
            total_calories = calories * amount / 100
            total_protein = protein * amount / 100
            total_fat = fat * amount / 100
            total_carbs = carbs * amount / 100

            current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            con = sql.connect("meals.db")
            c = con.cursor()

            c.execute(
                "INSERT INTO meals (id, time, meal, amount, calories, protein, fat, carbs) VALUES (?, ?, ?, ?, ?, ?, ?, ?)",
                (
                    message.from_user.id, current_time, meal, amount, total_calories, total_protein, total_fat,
                    total_carbs)
            )

            con.commit()
            con.close()

            bot.send_message(
                message.chat.id, f"{random.choice(FOOD_EMOJIS)} –ë–ª—é–¥–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!"
            )
        else:
            bot.send_message(message.chat.id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ö–ë–ñ–£ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


@bot.message_handler(commands=["view_meals"])
def view_meals(message: telebot.types.Message):
    if len(message.text.split()) == 1:
        period = "day"
    else:
        _, period = message.text.split(maxsplit=1)

    if period == "day":
        today = datetime.now().strftime("%Y-%m-%d")

        con = sql.connect("meals.db")
        c = con.cursor()
        c.execute(
            "SELECT meal, amount, calories, protein, fat, carbs FROM meals WHERE time LIKE ? AND id = ?",
            (f"{today}%", f"{message.from_user.id}"),
        )
        meals = c.fetchall()
        con.close()

        if meals:
            calories_total, protein_total, fat_total, carbs_total = 0, 0, 0, 0
            meal_list = "\n".join(
                [
                    f"- {meal} ({amount}g): *{calories:.2f} kcal, {protein:.2f}g P, {fat:.2f}g F, {carbs:.2f}g C*"
                    for meal, amount, calories, protein, fat, carbs in meals
                ]
            )
            for _, _, calories, protein, fat, carbs in meals:
                calories_total += calories
                protein_total += protein
                fat_total += fat
                carbs_total += carbs

            bot.send_message(
                message.chat.id,
                f"""{random.choice(FOOD_EMOJIS)} *–í–æ—Ç –≤–∞—à–∏ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –±–ª—é–¥–∞*:\n\n{meal_list}\n\nüìù –í —Å—É–º–º–µ: *{calories_total:.2f} kcal, {protein_total:.2f}g P, {fat_total:.2f}g F, {carbs_total:.2f}g C* –∑–∞ –¥–µ–Ω—å""",
                parse_mode="Markdown",
            )
        else:
            bot.send_message(
                message.chat.id, "‚ùå –í—ã –ø–æ–∫–∞ —á—Ç–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–ª–∏ –Ω–∏–∫–∞–∫–æ–π –µ–¥—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è!"
            )


@bot.message_handler(commands=["graph"])
def send_calories_graph(message: telebot.types.Message):
    user_id = message.from_user.id
    period = "week"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫ –∑–∞ –Ω–µ–¥–µ–ª—é

    try:
        con = sql.connect("meals.db")
        df = pd.read_sql_query(f"SELECT time, calories FROM meals WHERE id = {user_id}", con)
        con.close()

        df['time'] = pd.to_datetime(df['time'])

        df_daily = df.groupby(df['time'])['calories'].sum().reset_index()

        if period == "week":
            start_date = (datetime.now() - timedelta(days=6)).date()
            df_daily = df_daily[df_daily['time'].dt.date >= start_date]  # –î–æ–±–∞–≤–∏—Ç—å .dt.date
        elif period == "month":
            start_date = datetime.now() - timedelta(days=29)
            df_daily = df_daily[df_daily['time'].dt.date >= start_date]  # –î–æ–±–∞–≤–∏—Ç—å .dt.date

        # –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫
        plt.figure(figsize=(10, 5))
        plt.plot(df_daily['time'], df_daily['calories'])
        plt.xlabel("–î–∞—Ç–∞")
        plt.ylabel("–ö–∞–ª–æ—Ä–∏–∏ (–∫–∫–∞–ª)")
        plt.title("–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∫–∞–ª–æ—Ä–∏–π")
        plt.grid(True)

        # –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã - –¥–µ–Ω—å-–º–µ—Å—è—Ü
        plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%d-%m'))

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ —Ñ–∞–π–ª
        plot_path = "plot.png"
        plt.savefig(plot_path)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        with open(plot_path, "rb") as f:
            bot.send_photo(message.chat.id, f)

        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Å –≥—Ä–∞—Ñ–∏–∫–æ–º
        os.remove(plot_path)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞.")


bot.infinity_polling()
